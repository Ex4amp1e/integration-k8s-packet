---
name: ci
on:
  pull_request:
  push:
    branches:
      - 'release/**'
jobs:
  yamllint:
    name: yamllint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: yaml-lint
        uses: ibiqlik/action-yamllint@v1
        with:
          config_file: .ci/yamllint.yml
          strict: true

  shellcheck:
    name: shellcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: shellcheck
        uses: fkautz/shell-linter@v1.0.1

  golangci-lint:
    name: golangci-lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Go
        uses: actions/setup-go@v1
        with:
          go-version: 1.18
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.35

  excludeFmtErrorf:
    name: exclude fmt.Errorf
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Exclude fmt.Errorf
        run: |
          if grep -r --include=*.go --exclude=*.pb.go fmt.Errorf . ; then
           echo "Please use errors.Errorf (or errors.New or errors.Wrap or errors.Wrapf) as appropriate rather than fmt.Errorf"
           exit 1
          fi

  checkgomod:
    name: check go.mod and go.sum
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v1
        with:
          go-version: 1.16
      - run: go mod tidy
      - name: Check for changes in go.mod or go.sum
        run: |
          git diff --name-only --exit-code go.mod || ( echo "Run go tidy" && false )
          git diff --name-only --exit-code go.sum || ( echo "Run go tidy" && false )

  packet:
    name: packet (CNI ${{ matrix.CNI }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        CNI: ["default", "default2"]
    steps:
      - name: Set up /bin permissions   # 1. Set up /bin permissions
        run: |
          sudo chmod -R 777 /bin
      - name: Set envs
        run: |
          id=$(cat /proc/sys/kernel/random/uuid | sed 's/[-]//g' | head -c 8)
          echo CLUSTER_NAME=nsm-${id} >> $GITHUB_ENV
          echo SSH_KEY=nsm-ssh-${id} >> $GITHUB_ENV
      - name: Set up go                 # 2. Set up go
        uses: actions/setup-go@v1
        with:
          go-version: 1.18
      - name: Checkout files
        uses: actions/checkout@v2
        with:
          path: ${{ github.repository }}
      - name: Install kind         # 3. Install kind
        uses: engineerd/setup-kind@v0.5.0
        with:
          config: ${{ github.repository }}/cluster-config.yaml
          version: v0.14.0
          image: kindest/node:v1.24.0
      - name: Check kind
        run: |
          kubectl version
          kubectl get pods -n kube-system
      - name: Install clusterctl
        run: |
          curl -L https://github.com/kubernetes-sigs/cluster-api/releases/download/v1.2.1/clusterctl-linux-amd64 -o clusterctl
          chmod +x ./clusterctl
          mv ./clusterctl /usr/local/bin/clusterctl
          clusterctl version
      - name: Install metal CLI
        run: |
          curl -L https://github.com/equinix/metal-cli/releases/download/v0.9.0/metal-linux-amd64 -o metal
          chmod +x ./metal
          mv ./metal /usr/local/bin/metal
          metal -v

      - name: Checkout deployments      # 4. Checkout deployments
        uses: actions/checkout@v2
        with:
          repository: glazychev-art/deployments-k8s
          path: networkservicemesh/deployments-k8s
          ref: 'clusterctl_vfio'

      - name: Setup ssh  # 7. Run tests with cloudtest
        working-directory: ${{ github.repository }}
        id: setup_ssh
        run: |
          ssh-keygen -t rsa -f /tmp/sshkey -q -N ""
          eval `ssh-agent -s`
          ssh-add /tmp/sshkey
          ssh_id=$(metal ssh-key create --key "$(cat /tmp/sshkey.pub)" --label ${SSH_KEY} -o json | jq -r '.id')
          echo ::set-output name=ssh_id::${ssh_id}
        env:
          METAL_AUTH_TOKEN: ${{ secrets.PACKET_AUTH_TOKEN }}

      - name: Setup cluster
        uses: nick-fields/retry@v2.8.1
        with:
          timeout_minutes: 30
          max_attempts: 3
          command: |
            cd ${{ github.repository }}
            scripts/setup-cluster.sh "/tmp/sshkey"
          on_retry_command: |
            cd ${{ github.repository }}
            scripts/cleanup-cluster.sh ${CLUSTER_NAME}
        env:
          PACKET_API_KEY: ${{ secrets.PACKET_AUTH_TOKEN }}
          METAL_AUTH_TOKEN: ${{ secrets.PACKET_AUTH_TOKEN }}
          PROJECT_ID: 383890d0-f5d1-4de1-881a-4d1ede549d18
          FACILITY: da11
          NODE_OS: ubuntu_20_04
          KUBERNETES_VERSION: ${{ secrets.NSM_KUBERNETES_VERSION }}
          CONTROLPLANE_NODE_TYPE: "n3.xlarge.x86"
          WORKER_NODE_TYPE: "n3.xlarge.x86"
      - name: Integration tests
        run: |
          export KUBECONFIG=$HOME/.kube/config_packet
          go test -count 1 -timeout 1h40m -race -v ./tests_default
        env:
          ARTIFACTS_DIR: ${{ matrix.CNI }}-logs/
        working-directory: ${{ github.repository }}

      - name: Upload logs               # 9. Upload logs
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: ${{ matrix.CNI }}-logs
          path: ${{ github.repository }}/tests_default/${{ matrix.CNI }}-logs

      - name: Cleanup               # 9. Upload logs
        if: ${{ always() }}
        working-directory: ${{ github.repository }}
        run: |
          export KUBECONFIG=$HOME/.kube/config
          yes | metal ssh-key delete --id ${{ steps.setup_ssh.outputs.ssh_id }}
          EIP=$(metal ip get -p ${PROJECT_ID} -o json | jq -r '.[] | select( .tags != null and any(.tags[]; endswith(env.CLUSTER_NAME))) | .id')
          metal ip remove -i $EIP
          scripts/cleanup-cluster.sh ${CLUSTER_NAME}
        env:
          PROJECT_ID: 383890d0-f5d1-4de1-881a-4d1ede549d18
          METAL_AUTH_TOKEN: ${{ secrets.PACKET_AUTH_TOKEN }}
